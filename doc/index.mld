{0 Smtml - SMT Solving in OCaml}

{{:Smtml/index.html} Full API Documentation} |
{{:https://formalsec.github.io/smtml/coverage/} Test Coverage} |
{{:https://github.com/formalsec/smtml} GitHub Repository}

[Smtml] is an OCaml SMT solver abstraction layer providing:

+ Multi-backend support (currently Z3, Colibri2, Alt-Ergo, Bitwuzla, and cvc5)
+ Type-safe expression construction
+ Flexible solver interaction modes
+ Model extraction capabilities

{1:start Getting Started}

Install via OPAM:
{@sh skip[
opam install smtml
]}

Basic usage in OCaml toplevel:
{@ocaml[
# #require "smtml";;
# #install_printer Smtml.Expr.pp;;
# let pp_model = Smtml.Model.pp ~no_values:false;;
val pp_model : Smtml.Model.t Fmt.t = <fun>
# #install_printer pp_model;;
# #install_printer Smtml.Statistics.pp;;
# module Z3 = Smtml.Solver.Batch (Smtml.Z3_mappings);;
module Z3 :
  sig
    type t = Smtml.Solver.Batch(Smtml.Z3_mappings).t
    type solver = Smtml.Solver.Batch(Smtml.Z3_mappings).solver
    val solver_time : float ref
    val solver_count : int ref
    val pp_statistics : t Fmt.t
    val create : ?params:Smtml.Params.t -> ?logic:Smtml.Logic.t -> unit -> t
    val interrupt : t -> unit
    val clone : t -> t
    val push : t -> unit
    val pop : t -> int -> unit
    val reset : t -> unit
    val add : t -> Smtml.Expr.t list -> unit
    val add_set : t -> Smtml.Expr.Set.t -> unit
    val get_assertions : t -> Smtml.Expr.t list
    val get_statistics : t -> Smtml.Statistics.t
    val check : t -> Smtml.Expr.t list -> [ `Sat | `Unknown | `Unsat ]
    val check_set : t -> Smtml.Expr.Set.t -> [ `Sat | `Unknown | `Unsat ]
    val get_value : t -> Smtml.Expr.t -> Smtml.Expr.t
    val model : ?symbols:Smtml.Symbol.t list -> t -> Smtml.Model.t option
    val get_sat_model :
      ?symbols:Smtml.Symbol.t list ->
      t ->
      Smtml.Expr.Set.t -> [ `Model of Smtml.Model.t | `Unknown | `Unsat ]
  end
# let solver = Z3.create ();;
val solver : Z3.t = <abstr>
]}

{1:solvers Creating Solvers}

Smtml provides different solver modes through functors:

- {!module:Smtml.Solver.Batch} for one-shot solving
- {!module:Smtml.Solver.Incremental} for incremental solving

Create a Z3-based batch solver with custom parameters:

{@ocaml[
# let params = Smtml.Params.(default () $ (Timeout, 5000));;
val params : Smtml.Params.t = <abstr>
# let solver = Z3.create ~params ~logic:Smtml.Logic.QF_BV ();;
val solver : Z3.t = <abstr>
]}

{2:solver_ops Solver Operations}

Key operations (see {!module:Smtml.Solver_intf}):
- {!val:Smtml.Solver_intf.S.push}/ {!val:Smtml.Solver_intf.S.pop} for context management
- {!val:Smtml.Solver_intf.S.add} for adding constraints
- {!val:Smtml.Solver_intf.S.check} for satisfiability checks
- {!val:Smtml.Solver_intf.S.get_value} for model extraction

{1:expressions Building Expressions}

Construct type-safe SMT expressions using:

- {!module:Smtml.Symbol} for creating variables
- {!module:Smtml.Expr} combinators
- {!module:Smtml.Ty} for type annotations

Example: Bitvector arithmetic
{@ocaml[
# open Smtml;;
# let cond =
  let x = Expr.symbol (Symbol.make (Ty_bitv 8) "x") in
  let y = Expr.symbol (Symbol.make (Ty_bitv 8) "y") in
  let sum = Expr.binop (Ty_bitv 8) Add x y in
  let num = Expr.value (Bitv (Bitvector.of_int8 42)) in
  Expr.relop Ty_bool Eq sum num;;
val cond : Expr.t = (bool.eq (i8.add x y) 42)
]}

{1:checking Checking Satisfiability}

Add constraints and check satisfiability:
{@ocaml[
# Z3.add solver [ cond ];;
- : unit = ()
# match Z3.check solver [] with
  | `Sat -> "Satisfiable"
  | `Unsat -> "Unsatisfiable"
  | `Unknown -> "Unknown";;
- : string = "Satisfiable"
]}

{1:models Working with Models}

Extract values from satisfiable constraints:
{@ocaml[
# let model = Z3.model solver |> Option.get;;
val model : Model.t = (model
    (x i8 9)
    (y i8 33))
# let x_val =
  let x = Symbol.make (Ty_bitv 8) "x" in
  Model.evaluate model x;;
val x_val : Value.t option = Some (Smtml.Value.Bitv <abstr>)
]}

{1:advanced Advanced Features}

{2:params Solver Parameters}

Customize solver behavior using parameters:
{@ocaml[
let params = Smtml.Params.(
  default ()
  $ (Timeout, 1000)
  $ (Model, true)
  $ (Unsat_core, false)
);;
]}

{2:statistics Solver Statistics}

Track solver performance:
{@ocaml non-deterministic[
# Z3.get_statistics solver
- : Statistics.t =
((max memory 16.9)
 (memory 16.9)
 (num allocs 7625)
 (rlimit count 362)
 (sat backjumps 2)
 (sat conflicts 2)
 (sat decisions 15)
 (sat mk clause 2ary 57)
 (sat mk clause nary 98)
 (sat mk var 53)
 (sat propagations 2ary 28)
 (sat propagations nary 30))
]}

{1 More Examples}

Explore comprehensive usage scenarios:
- {{!examples}Optimizer} - Using optimizers

{1:contrib Contributing}

Smtml is open source! Report issues and contribute at:
{{:https://github.com/formalsec/smtml/issues} GitHub Repository}
