(ocamllex
 (modules lexer))

(menhir
 (modules parser))

(library
 (name smtml)
 (public_name smtml)
 (modules
  ast
  bitwuzla_mappings
  ;axioms
  cache
  cache_intf
  constructors_intf
  colibri2_mappings
  cvc5_mappings
  eval
  expr
  interpret
  interpret_intf
  lexer
  log
  mappings
  mappings_intf
  model
  num
  op_intf
  optimizer
  parser
  params
  parse
  solver
  solver_intf
  solver_dispatcher
  symbol
  ty
  utils
  value
  z3_mappings
  z3_mappings2)
 (private_modules lexer parser)
 (libraries
  hc
  z3
  ocaml_intrinsics
  (select
   colibri2_mappings.ml
   from
   (colibri2.core
    colibri2.solver
    colibri2.theories.bool
    colibri2.theories.quantifiers
    colibri2.theories.LRA
    colibri2.theories.LRA.stages.stage2
    colibri2.theories.fp
    ->
    colibri2_mappings.default.ml)
   (-> colibri2_mappings.nop.ml))
  (select
   bitwuzla_mappings.ml
   from
   (bitwuzla-cxx -> bitwuzla_mappings.default.ml)
   (-> bitwuzla_mappings.nop.ml))
  (select
   cvc5_mappings.ml
   from
   (cvc5 -> cvc5_mappings.default.ml)
   (-> cvc5_mappings.nop.ml)))
 (instrumentation
  (backend bisect_ppx --exclusions lib/bisect.exclude)
  (deps bisect.exclude)))

(rule
 (targets
  colibri2_mappings.nop.ml
  bitwuzla_mappings.nop.ml
  cvc5_mappings.nop.ml)
 (deps mappings.nop.ml)
 (action
  (progn
   (with-stdout-to
    colibri2_mappings.nop.ml
    (progn
     (echo "let solver_name = \"Colibri2\"\n")
     (cat mappings.nop.ml)))
   (with-stdout-to
    bitwuzla_mappings.nop.ml
    (progn
     (echo "let solver_name = \"Bitwuzla\"\n")
     (cat mappings.nop.ml)))
   (with-stdout-to
    cvc5_mappings.nop.ml
    (progn
     (echo "let solver_name = \"cvc5\"\n")
     (cat mappings.nop.ml))))))
