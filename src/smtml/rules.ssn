((unop _ Not (unop _ty Not x)) ==> (x))
((unop _ Neg (unop _ty Neg x)) ==> (x))
((unop Ty_str Trim (cvtop Ty_real ToString x)) ==> (x))
((unop _ Not (relop ty Lt e1 e2)) ==> (relop ty Le e2 e1))
((unop _ Not (relop ty Le e1 e2)) ==> (relop ty Lt e2 e1))
((unop _ Not (relop ty Gt e1 e2)) ==> (relop ty Le e1 e2))
((unop _ Not (relop ty Ge e1 e2)) ==> (relop ty Lt e1 e2))
((unop _ty Reverse (concrete Ty_list l)) ==> (concrete Ty_list (List.rev l)))
((unop _ty Length (concrete Ty_list l)) ==> (Val (Int (List.length l))))
((binop _ty And (Val True) hte) ==> hte)
((binop _ty And hte (Val True)) ==> hte)
((binop _ty Add (Val (Bitv bv)) hte2) ==> hte2 when (Bitvector.eqz bv))
((binop _ty Or (Val (Bitv bv)) hte2) ==> hte2 when (Bitvector.eqz bv))
((binop _ty Add hte1 (Val (Bitv bv))) ==> hte1 when (Bitvector.eqz bv))
((binop _ty Or hte1 (Val (Bitv bv))) ==> hte1 when (Bitvector.eqz bv))
((binop _ty And (Val (Bitv bv)) hte2) ==> hte2 when (Bitvector.eqz bv))
((binop _ty Mul (Val (Bitv bv)) hte2) ==> hte2 when (Bitvector.eqz bv))
((binop _ty And hte1 (Val (Bitv bv))) ==> hte1 when (Bitvector.eqz bv))
((binop _ty Mul hte1 (Val (Bitv bv))) ==> hte1 when (Bitvector.eqz bv))
((binop _ty Mul (Val (Bitv bv)) hte2) ==> hte2 when (Bitvector.eq_one bv))
((binop _ty Mul hte1 (Val (Bitv bv))) ==> hte1 when (Bitvector.eq_one bv))
((binop ty Add (binop ty Add x (Val v1)) (Val v2)) ==> (binop ty Add x (Val (Eval.binop ty Add v1 v2))))
((binop ty Sub (binop ty Sub x (Val v1)) (Val v2)) ==> (binop ty Sub x (Val (Eval.binop ty Add v1 v2))))
((binop ty Mul (binop ty Mul x (Val v1)) (Val v2)) ==> (binop ty Mul x (Val (Eval.binop ty Mul v1 v2))))
((binop ty Add (Val v1) (binop ty Add x (Val v2))) ==> (binop ty Add (Val (Eval.binop ty Add v1 v2)) x))
((binop ty Mul (Val v1) (binop ty Mul x (Val v2))) ==> (binop ty Mul (Val (Eval.binop ty Mul v1 v2)) x))
((binop _ty List_append (concrete Ty_list l0) (concrete Ty_list [])) ==> (concrete Ty_list l0))
((binop _ty List_append (concrete Ty_list []) (concrete Ty_list l1)) ==> (concrete Ty_list l1))
((binop _ty List_append (concrete Ty_list l0) (Val (List l1))) ==> (concrete Ty_list (List.append l0 (List.map value l1))))
((binop _ty List_append (Val (List l0)) (concrete Ty_list l1)) ==> (concrete Ty_list (List.append (List.map value l0) l1)))
((binop _ty List_append (concrete Ty_list l0) (concrete Ty_list l1)) ==> (concrete Ty_list (List.append l0 l1)))
((triop _ty Ite (Val True) e1 _e2) ==> (e1))
((triop _ty Ite (Val False) _e1 e2) ==> (e2))
((triop ty Ite c1 (triop _ty1 Ite c2 e1 e2) (triop _ty2 Ite c3 e3 e4)) ==> (triop ty Ite (binop Ty_bool And c1 c2) e1 (triop ty Ite c1 e2 (triop ty Ite c3 e3 e4))))
((naryop Ty_str Concat [(naryop Ty_str Concat l1); (naryop Ty_str Concat l2)]) ==> (naryop Ty_str Concat (List.append l1 l2)))