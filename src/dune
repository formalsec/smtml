(include_subdirs unqualified)

(library
 (name smtml)
 (public_name smtml)
 (modules
  ast
  bitwuzla_mappings
  ;axioms
  cache
  cache_intf
  constructors_intf
  colibri2_mappings
  cvc5_mappings
  eval
  expr
  interpret
  interpret_intf
  lexer
  mappings
  mappings_intf
  model
  num
  op_intf
  optimizer
  optimizer_intf
  parser
  params
  parse
  solver
  solver_intf
  solver_dispatcher
  symbol
  statistics
  ty
  utils
  value
  z3_mappings)
 (private_modules lexer parser)
 (flags
  (:standard -open Prelude))
 (libraries
  hc
  menhirLib
  ocaml_intrinsics
  prelude
  rusage
  patricia-tree
  yojson
  (select
   colibri2_mappings.ml
   from
   (colibri2.core
    colibri2.solver
    colibri2.theories.bool
    colibri2.theories.quantifiers
    colibri2.theories.LRA
    colibri2.theories.LRA.stages.stage2
    colibri2.theories.fp
    ->
    colibri2_mappings.default.ml)
   (-> colibri2_mappings.nop.ml))
  (select
   bitwuzla_mappings.ml
   from
   (threads bitwuzla-cxx -> bitwuzla_mappings.default.ml)
   (-> bitwuzla_mappings.nop.ml))
  (select
   z3_mappings.ml
   from
   (z3 -> z3_mappings.default.ml)
   (-> z3_mappings.nop.ml))
  (select
   cvc5_mappings.ml
   from
   (cvc5 -> cvc5_mappings.default.ml)
   (-> cvc5_mappings.nop.ml)))
 (instrumentation
  (backend bisect_ppx --exclusions src/bisect.exclude)
  (deps bisect.exclude)))

(rule
 (targets
  colibri2_mappings.nop.ml
  bitwuzla_mappings.nop.ml
  cvc5_mappings.nop.ml
  z3_mappings.nop.ml)
 (deps mappings.nop.ml)
 (action
  (progn
   (with-stdout-to
    z3_mappings.nop.ml
    (progn
     (echo "let solver_name = \"Z3\"\n")
     (echo "let solver_package = \"z3\"\n")
     (cat %{deps})))
   (with-stdout-to
    colibri2_mappings.nop.ml
    (progn
     (echo "let solver_name = \"Colibri2\"\n")
     (echo "let solver_package = \"colibri2\"\n")
     (cat %{deps})))
   (with-stdout-to
    bitwuzla_mappings.nop.ml
    (progn
     (echo "let solver_name = \"Bitwuzla\"\n")
     (echo "let solver_package = \"bitwuzla-cxx\"\n")
     (cat %{deps})))
   (with-stdout-to
    cvc5_mappings.nop.ml
    (progn
     (echo "let solver_name = \"cvc5\"\n")
     (echo "let solver_package = solver_name\n")
     (cat %{deps}))))))
